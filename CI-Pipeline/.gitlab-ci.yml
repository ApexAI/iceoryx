stages:
  - Build
  - Static Analysis 1
  - Static Analysis 2
  - Test
  - Report

# Description:
# Prerequisites:
# Output:
build:
  stage: Build
  image: gcc
  before_script:
    # Install additional required software
    # List of required packages taken from https://github.com/eclipse-iceoryx/iceoryx/blob/master/doc/website/getting-started/installation.md
    - apt update && apt -y install gcc g++ cmake libacl1-dev libncurses5-dev pkg-config
  script:
    # Set some variables pointing to important folders
    - PROJECT_ROOT=$PWD
    - CI_PIPELINE_DIR=$PROJECT_ROOT/CI-Pipeline
    - ARTIFACTS_BUILD_DIR=$CI_PIPELINE_DIR/artifacts/build
    - mkdir -p $ARTIFACTS_BUILD_DIR
    # Build steps from https://github.com/eclipse-iceoryx/iceoryx/blob/master/doc/website/getting-started/installation.md
    - git clone https://github.com/eclipse-iceoryx/iceoryx.git
    - cd iceoryx
    # Set CMAKE_EXPORT_COMPILE_COMMANDS to force generation of compile_commands.json
    - cmake -Bbuild -Hiceoryx_meta -DCMAKE_EXPORT_COMPILE_COMMANDS=1
    - cmake --build build
    # Artifacts generated by this job
    - cp $PROJECT_ROOT/iceoryx/build/compile_commands.json $ARTIFACTS_BUILD_DIR
    - ls -l $ARTIFACTS_BUILD_DIR
  artifacts:
    paths:
      - CI-Pipeline/artifacts/build

# Description:
#    Static analysis with Axivion.
#    The build commands are run using irCXX and irAR to generate the *.ir file.
#    iceoryx is composed of several smaller libraries, and these are liked together into one big *.ir file
#    The analysis is performed using axivion_ci, with the configuration contained in iceoryx_axivion.json
#    The *.ir and *.rfg files are used to generate *.ldi files that can be used as input to Lattix
# Prerequisites:
#    None
# Output:
#    Include.ldi and DeclarationFacts.ldi, input files to Lattix
#    iceoryx.db SQlite database geerated by Axivion with analysis results
axivion:
  stage: Static Analysis 1
  image: registry.lpdop.com/cc/internal/axivion-docker:latest
  before_script:
    # Install additional required software
    - apt update
    # cmake has a dependency on tzdata, which asks interactively for timezone information
    - DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata
    - apt -y install git gcc g++ cmake libacl1-dev libncurses5-dev pkg-config
    # Install X to enable graphics output
    - apt -y install xvfb
    - export DISPLAY=:1
    - Xvfb :1 -screen 0 1024x768x16 &
  script:
    # Set some variables pointing to important folders
    - PROJECT_ROOT=$PWD
    - CI_PIPELINE_DIR=$PROJECT_ROOT/CI-Pipeline
    - CI_AXIVION_DIR=$CI_PIPELINE_DIR/axivion
    - CI_LATTIX_DIR=$CI_PIPELINE_DIR/lattix
    - ARTIFACTS_AXIVION_DIR=$CI_PIPELINE_DIR/artifacts/axivion
    - mkdir -p $ARTIFACTS_AXIVION_DIR
    # Configure the environment to use the axivion compiler instead of gcc
    - cd $CI_AXIVION_DIR
    - gccsetup --gcc gcc-9 --g++ g++-9 --config .
    - export BAUHAUS_CONFIG=$CI_AXIVION_DIR
    # Get the sources and build using (modified) cmake command
    - cd $PROJECT_ROOT
    - git clone https://github.com/eclipse-iceoryx/iceoryx.git
    - cd iceoryx
    - cmake -Bbuild -Hiceoryx_meta -D CMAKE_C_COMPILER:FILEPATH=irCC -D CMAKE_CXX_COMPILER:FILEPATH=irCXX -D CMAKE_AR:FILEPATH=irAR
    - CAFECC_OPTIONS=-B`pwd` cmake --build build
    # Combine all the *.a.ir files into one (these are all the libraries in iceoryx)
    # Pass include_unused and shared flags to the linker so that all symbols are included
    - find . -name *.a.ir | xargs -r ls -lah
    - cafeCC -o $ARTIFACTS_AXIVION_DIR/iceoryx.ir -larg --include_unused -larg --shared -Wl,--whole-archive $(find . -name *.a.ir | tr '\n' ' ')
    # Do the Axivion analysis (also generates an rfg file)
    - BAUHAUS_CONFIG=$CI_AXIVION_DIR/iceoryx_axivion.json axivion_ci
    # Convert the ir and rfg files to a format suitable for Lattix
    - rfgscript $CI_LATTIX_DIR/rfg2ldi2.py $ARTIFACTS_AXIVION_DIR/iceoryx.rfg -i $ARTIFACTS_AXIVION_DIR/iceoryx.ir Include File $ARTIFACTS_AXIVION_DIR/Include.ldi
    - rfgscript $CI_LATTIX_DIR/rfg2ldi2.py $ARTIFACTS_AXIVION_DIR/iceoryx.rfg -i $ARTIFACTS_AXIVION_DIR/iceoryx.ir "Declaration Facts" File $ARTIFACTS_AXIVION_DIR/DeclarationFacts.ldi
    # Artifacts generated by this job
    - rm $ARTIFACTS_AXIVION_DIR/*.bak
    - ls -l $ARTIFACTS_AXIVION_DIR
  artifacts:
    paths:
      - CI-Pipeline/artifacts/axivion

# Description:
# Prerequisites:
# Output:
todo-analysis:
  stage: Static Analysis 1
  image: ubuntu:20.04
  before_script:
    # Install additional required software
    - apt update && apt -y install git
  script:
    # Set some variables pointing to important folders
    - PROJECT_ROOT=$PWD
    - CI_PIPELINE_DIR=$PROJECT_ROOT/CI-Pipeline
    - CI_TODO_DIR=$CI_PIPELINE_DIR/todo-analysis
    - ARTIFACTS_TODO_DIR=$CI_PIPELINE_DIR/artifacts/todo-analysis
    - mkdir -p $ARTIFACTS_TODO_DIR
    # Clone the repository and do the analysis
    - git clone https://github.com/eclipse-iceoryx/iceoryx.git
    - chmod +x $CI_TODO_DIR/runKeywordsSearch.sh
    - $CI_TODO_DIR/runKeywordsSearch.sh ./iceoryx $ARTIFACTS_TODO_DIR/todo-analysis.csv
    # Artifacts generated by this job
    - ls -l $ARTIFACTS_TODO_DIR
  artifacts:
    paths:
      - CI-Pipeline/artifacts/todo-analysis

# Description:
#    Architecture analysis with Lattix
# Prerequisites:
# Output:
lattix:
  stage: Static Analysis 2
  image: 065108051377.dkr.ecr.us-east-1.amazonaws.com/verifa-demo/lattix-cli@sha256:4aac1e6cc5ee2052956dabd2a1b734ff9e6259ad648e26cf5da178bee769133b
  #image: 065108051377.dkr.ecr.us-east-1.amazonaws.com/verifa-demo/lattix-cli
  needs: [axivion]
  before_script:
    # Install additional required software
    - mkdir /root/.lattix
    - cp $LATTIX_LIC_FILE /root/.lattix/ldc.lic
  script:
    # Set some variables pointing to important folders
    - PROJECT_ROOT=$PWD
    - CI_PIPELINE_DIR=$PROJECT_ROOT/CI-Pipeline
    - CI_LATTIX_DIR=$CI_PIPELINE_DIR/lattix
    - ARTIFACTS_AXIVION_DIR=$CI_PIPELINE_DIR/artifacts/axivion
    - ARTIFACTS_LATTIX_DIR=$CI_PIPELINE_DIR/artifacts/lattix
    - mkdir -p $ARTIFACTS_LATTIX_DIR
    # Get the most recent file from LattixWeb
    - set +e; ldcget.sh -output:$ARTIFACTS_LATTIX_DIR/iceoryx.ldz -url:$LATTIXWEB_URL -track:iceoryx -user:default_user -password:default_user; set -e
    # Import the Axivion artifacts to update the model
    - ldcupdate.sh $ARTIFACTS_LATTIX_DIR/iceoryx.ldz -module:axivion -deltatags $ARTIFACTS_AXIVION_DIR/Include.ldi $ARTIFACTS_AXIVION_DIR/DeclarationFacts.ldi
    # Do the analysis
    - ldcscript.sh $ARTIFACTS_LATTIX_DIR/iceoryx.ldz -script:ImportExportRules.importRules -file:$CI_LATTIX_DIR/iceoryx_rules.rul -save
    # Generate reports
    - ldcreport.sh $ARTIFACTS_LATTIX_DIR/iceoryx.ldz -violations_with_lines -report:csv -reportfile:$ARTIFACTS_LATTIX_DIR/violations-with-lines.csv
    - ldcreport.sh $ARTIFACTS_LATTIX_DIR/iceoryx.ldz -cycles -report:csv -reportfile:$ARTIFACTS_LATTIX_DIR/cycles.csv
    - ldcreport.sh $ARTIFACTS_LATTIX_DIR/iceoryx.ldz -reportfile:$ARTIFACTS_LATTIX_DIR/dsm.png -reportView:1:none
    - ldcreport.sh $ARTIFACTS_LATTIX_DIR/iceoryx.ldz -reportfile:$ARTIFACTS_LATTIX_DIR/heatmap.png -reportView:1:all
    # Publish to LattixWeb
    - ldcpublish.sh $ARTIFACTS_LATTIX_DIR/iceoryx.ldz -url:$LATTIXWEB_URL -track:iceoryx -version:$CI_COMMIT_SHORT_SHA -user:default_user -password:default_user
    # Artifacts generated by this job
    - ls -l $ARTIFACTS_LATTIX_DIR
  artifacts:
    paths:
      - CI-Pipeline/artifacts/lattix

# Description:
#    Unit testing with VectorCAST
# Prerequisites:
# Output:
unit-tests:
  stage: Test
  image: 065108051377.dkr.ecr.us-east-1.amazonaws.com/verifa-demo/vectorcast
  before_script:
    # Install additional required software
    - echo "10.0.0.9 ip-10-0-0-9" >> /etc/hosts
    - export VECTOR_LICENSE_FILE=7650@ip-10-0-0-9
    - yum install -y git cmake ncurses-devel ncurses
  script:
    - git clone https://github.com/eclipse-iceoryx/iceoryx.git
    - cd iceoryx
    #- cmake -Bbuild -Hiceoryx_meta
    #- cd build
    #- vcshell make
    #- vcdb getfiles > filelist.txt
    #- vpython /opt/vectorcast/python/vector/apps/vcshell/EnvCreate.py --filelist filelist.txt --build --coverage "Statement+Branch"

# Description:
# Prerequisites:
# Output:
control-flow:
  stage: Test
  image: alpine
  script:
    - echo "Starting control flow analysis"

# Description:
# Prerequisites:
# Output:
data-flow:
  stage: Test
  image: alpine
  script:
    - echo "Starting data flow analysis"

# Description:
# Prerequisites:
# Output:
coupling-analysis:
  stage: Test
  image: alpine
  script:
    - echo "Starting coupling analysis"

# Description:
# Prerequisites:
# Output:
coverage-analysis:
  stage: Test
  image: alpine
  script:
    - echo "Starting coverage analysis"

# Description:
# Prerequisites:
# Output:
ISO26262-Compliance:
  stage: Report
  #image: sphinxdoc/sphinx-latexpdf:3.4.0
  image: pathwaytechnologies/sphinx-latexpdf
  needs: [axivion, lattix, todo-analysis]
  before_script:
    # Install additional required software
    - apt update && apt -y install sqlite3
  script:
    # Get installed version
    - sphinx-build --version
    # Set some variables pointing to important folders
    - PROJECT_ROOT=$PWD
    - CI_PIPELINE_DIR=$PROJECT_ROOT/CI-Pipeline
    - CI_SPHINX_DIR=$CI_PIPELINE_DIR/sphinx
    - CI_AXIVION_DIR=$CI_PIPELINE_DIR/axivion
    - CI_DOCUMENT_DIR=$CI_PIPELINE_DIR/compliance-iso26262
    - ARTIFACTS_AXIVION_DIR=$CI_PIPELINE_DIR/artifacts/axivion
    - ARTIFACTS_LATTIX_DIR=$CI_PIPELINE_DIR/artifacts/lattix
    - ARTIFACTS_SPHINX_DIR=$CI_PIPELINE_DIR/artifacts/sphinx
    - ARTIFACTS_TODO_DIR=$CI_PIPELINE_DIR/artifacts/todo-analysis
    - mkdir -p $ARTIFACTS_SPHINX_DIR
    # Prepare the Lattix assets
    - cp -r $ARTIFACTS_LATTIX_DIR $CI_DOCUMENT_DIR/_assets/lattix
    # Prepare the Axivion assets
    - mkdir -p $CI_DOCUMENT_DIR/_assets/axivion
    - chmod +x $CI_AXIVION_DIR/*.sh
    - $CI_AXIVION_DIR/axivionViolationReportCsv.sh $ARTIFACTS_AXIVION_DIR/iceoryx.db $CI_DOCUMENT_DIR/_assets/axivion
    - $CI_AXIVION_DIR/axivionCyclesReportRst.sh $ARTIFACTS_AXIVION_DIR/iceoryx.db $CI_DOCUMENT_DIR _assets/axivion
    # Prepare the TODO analysis assets
    - cp -r $ARTIFACTS_TODO_DIR $CI_DOCUMENT_DIR/_assets/todo-analysis
    # Generate the report
    - cd $CI_DOCUMENT_DIR
    - make latexpdf
    # Artifacts generated by this job
    - cp $CI_DOCUMENT_DIR/_build/latex/iceoryx.pdf $ARTIFACTS_SPHINX_DIR
    - ls -l $ARTIFACTS_SPHINX_DIR
  artifacts:
    paths:
      - CI-Pipeline/artifacts/sphinx
