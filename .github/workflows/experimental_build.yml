# This is a basic workflow to help you get started with Actions

name: Experimental build

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master, iox-#495-add-gcc-5.4-CI-job ]
  pull_request:
    branches: [ master ]

jobs:
  build_job_latest_clang_gcc:
    runs-on: ubuntu-latest
    name: Build on latest clang release
    steps:
      - name: Install iceoryx dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libacl1-dev libncurses5-dev

      - name: Install latest clang stable release
        shell: bash
        run: |
          REPO_NAME="deb http://apt.llvm.org/focal/ llvm-toolchain-focal main"
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo add-apt-repository "${REPO_NAME}"
          sudo apt-get update
          sudo apt-get install -y clang

      - name: Checkout
        uses: actions/checkout@v2

      - name: Build sources
        continue-on-error: true
        shell: bash
        env:
          CC:   clang
          CXX:  clang++
        run: |
          echo $(clang --version)
          sudo $GITHUB_WORKSPACE/tools/add_test_users.sh
          $GITHUB_WORKSPACE/tools/iceoryx_build_test.sh build-strict build-all out-of-tree build-shared test-add-user

      - name: Run all tests
        continue-on-error: true
        run: |
          cd $GITHUB_WORKSPACE/build
          tools/run_tests.sh all

  build_job_gcc54_aarch64:
    runs-on: ubuntu-latest
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}
    strategy:
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu16.04

    steps:
      - uses: actions/checkout@v2.1.0
      - uses: uraimo/run-on-arch-action@v2.0.5
        continue-on-error: true
        name: Build artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          githubToken: ${{ github.token }}

          setup: |
            mkdir -p "${PWD}/artifacts"

          dockerRunArgs: |
            --volume "$GITHUB_WORKSPACE:/artifacts"

          env: | # YAML, but pipe character is necessary
            artifact_name: git-${{ matrix.distro }}_${{ matrix.arch }}

          shell: /bin/sh

          install: |
            case "${{ matrix.distro }}" in
              ubuntu*|jessie|stretch|buster)
                apt-get update -q -y
                apt-get install -q -y git gcc g++ libacl1-dev libncurses5-dev wget make maven openjdk-11-jdk-headless
                ;;
            esac

          run: |
            wget https://github.com/Kitware/CMake/releases/download/v3.20.0-rc3/cmake-3.20.0-rc3-linux-aarch64.sh \
            -q -O /tmp/cmake-install.sh
            chmod u+x /tmp/cmake-install.sh
            mkdir /usr/bin/cmake
            /tmp/cmake-install.sh --skip-license --prefix=/usr/bin/cmake
            rm /tmp/cmake-install.sh
            cd /artifacts
            export PATH="/usr/bin/cmake/bin:${PATH}"
            tools/iceoryx_build_test.sh build-strict build-all out-of-tree build-shared test-add-user
            cd build
            tools/run_tests.sh all
